name: Mirror to GitLab

on:
  push:
    branches: ["**"]
    tags: ["**"]
  delete:
    branches: ["**"]
    tags: ["**"]
  workflow_dispatch:

concurrency:
  group: mirror-to-gitlab
  cancel-in-progress: false

jobs:
  to_gitlab:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure identity + LFS
        run: |
          git config user.name "GitHub→GitLab Mirror Bot"
          git config user.email "mirror-bot@users.noreply.github.com"
          git lfs install --skip-smudge

      - name: Build remote and verify access
        env:
          GL_TOKEN: ${{ secrets.GITLAB_REMOTE }}   # token glpat-...
          GL_PATH:  ${{ vars.GITLAB_PATH }}        # ex.: projeto-final-maisprati-codifica/projetofinalmaispratigrupo6
        run: |
          set -e
          if [ -z "$GL_PATH" ]; then
            echo "Defina a Repository variable GITLAB_PATH (ex.: grupo/subgrupo/repo)"; exit 1
          fi
          REMOTE="https://oauth2:${GL_TOKEN}@gitlab.com/${GL_PATH}.git"
          REMOTE="${REMOTE%/}"
          echo "Testando acesso a $REMOTE ..."
          git ls-remote "$REMOTE" >/dev/null
          git remote add gitlab "$REMOTE" || git remote set-url gitlab "$REMOTE"
          git remote -v

      - name: Sync branches and tags (origin → GitLab, safe prune)
        run: |
          set -e
          # 1) Traga TODAS as branches/tags do GitHub (origin) para refs remotas locais
          git fetch --prune --tags origin '+refs/heads/*:refs/remotes/origin/*'

          # 2) Espelhe as branches do origin para o GitLab
          #    (usa as refs remotas, assim 'main' e demais existem e não são "deletadas" por engano)
          git push --prune gitlab +refs/remotes/origin/*:refs/heads/*

          # 3) Espelhe as tags
          git push --prune gitlab +refs/tags/*:refs/tags/*

          # 4) (Opcional) LFS
          git lfs push --all gitlab || true

