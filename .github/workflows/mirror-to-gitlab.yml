name: Mirror to GitLab

on:
  push:
    branches: ["**"]
    tags: ["**"]
  delete:
    branches: ["**"]
    tags: ["**"]
  workflow_dispatch:

concurrency:
  group: mirror-to-gitlab
  cancel-in-progress: false

jobs:
  to_gitlab:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure identity + LFS
        run: |
          git config user.name "GitHub→GitLab Mirror Bot"
          git config user.email "mirror-bot@users.noreply.github.com"
          git lfs install --skip-smudge
          git config --global lfs.locksverify false

      - name: Build remote and verify access
        env:
          GL_TOKEN: ${{ secrets.GITLAB_REMOTE }}   # token glpat-...
          GL_PATH:  ${{ vars.GITLAB_PATH }}        # ex.: meu-grupo/sub/meu-repo
        run: |
          set -e
          [ -n "$GL_PATH" ] || { echo "Defina a variable GITLAB_PATH"; exit 1; }
          REMOTE="https://oauth2:${GL_TOKEN}@gitlab.com/${GL_PATH}.git"
          REMOTE="${REMOTE%/}"
          git ls-remote "$REMOTE" >/dev/null
          git remote add gitlab "$REMOTE" || git remote set-url gitlab "$REMOTE"
          git remote -v

      
      - name: Sync branches and tags (origin → GitLab, no force; skip main)
        run: |
          set -e
          # 1) Traga todas as branches/tags do GitHub (origin)
          git fetch --prune --tags origin '+refs/heads/*:refs/remotes/origin/*'

          # 2) Lista de branches do origin
          mapfile -t ORIGIN_BRANCHES < <(git for-each-ref --format='%(refname:strip=3)' refs/remotes/origin)

          # 3) Envie TODAS as branches, EXCETO main, SEM force
          for br in "${ORIGIN_BRANCHES[@]}"; do
            if [ "$br" = "main" ]; then
              echo "Pulando branch protegida 'main'"
              continue
            fi
            git push gitlab "refs/remotes/origin/$br:refs/heads/$br"
          done

          # 4) Prune seguro no GitLab (remove branches que saíram do origin), exceto main
          mapfile -t GL_BRANCHES < <(git ls-remote --heads gitlab | awk '{print $2}' | sed 's#refs/heads/##')
          for br in "${GL_BRANCHES[@]}"; do
            if [ "$br" = "main" ]; then continue; fi
            if ! printf '%s\n' "${ORIGIN_BRANCHES[@]}" | grep -qx "$br"; then
              echo "Removendo no GitLab: $br (não existe no origin)"
              git push gitlab ":refs/heads/$br" || true
            fi
          done

          # 5) Tags (sem force)
          git push --prune gitlab "refs/tags/*:refs/tags/*"

          # 6) LFS (se houver)
          git lfs push --all gitlab || true

